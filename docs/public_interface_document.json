{
  "package_name": "com.example.aa",
  "project_description": "A Flutter project using the Stacked architecture, featuring internationalization, multiple flavors, and various utility classes. The app now displays metrics from the S&P 500 on the homepage.",
  "architecture_overview": "The application follows the Stacked architecture with separate folders for app setup, config, localization, models, services, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The app integrates with a financial API to fetch and display S&P 500 metrics.",
  "folder_structure": {
    "lib": {
      "app": {
        "app.bottomsheets.dart": {},
        "app.dart": {},
        "app.dialogs.dart": {},
        "app.locator.dart": {},
        "app.router.dart": {}
      },
      "config": {
        "development": {
          "firebase_options_development.dart": {}
        },
        "production": {
          "firebase_options_production.dart": {}
        }
      },
      "l10n": {
        "arb": {
          "app_en.arb": {},
          "app_es.arb": {}
        },
        "l10n.dart": {},
        "localizations_extension.dart": {},
        "supported_locales.dart": {}
      },
      "main": {
        "bootstrap.dart": {},
        "main_development.dart": {},
        "main_production.dart": {}
      },
      "models": {
        "enums": {
          "flavor.dart": {}
        }
      },
      "observer": {
        "screen_observer.dart": {}
      },
      "services": {
        "analytic_service.dart": {},
        "financial_service.dart": {}
      },
      "ui": {
        "bottom_sheets": {
          "notice": {
            "notice_sheet.dart": {},
            "notice_sheet_model.dart": {}
          }
        },
        "common": {
          "app_colors.dart": {},
          "ui_helpers.dart": {}
        },
        "dialogs": {
          "info_alert": {
            "info_alert_dialog.dart": {},
            "info_alert_dialog_model.dart": {}
          }
        },
        "views": {
          "app": {
            "app_view.dart": {},
            "app_viewmodel.dart": {}
          },
          "home": {
            "home_view.dart": {},
            "home_viewmodel.dart": {}
          },
          "startup": {
            "startup_view.dart": {},
            "startup_viewmodel.dart": {}
          }
        }
      },
      "utils": {
        "const": {
          "const.dart": {}
        },
        "contact": {
          "contact_util.dart": {}
        },
        "date": {
          "date_util.dart": {}
        },
        "exceptions": {
          "api_exception.dart": {}
        },
        "extensions": {
          "color_extension.dart": {}
        },
        "flavors": {
          "flavors.dart": {}
        },
        "json": {
          "json_util.dart": {}
        }
      }
    }
  },
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "Generated router for the Stacked architecture.",
      "class_diagram": "@startuml\nclass StackedRouter\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "Initializes the app, sets up locator, dialogs, and bottom sheets.",
      "class_diagram": "@startuml\nclass bootstrap\n@enduml",
      "methods": [
        {
          "name": "bootstrap",
          "description": "Bootstraps the application",
          "parameters": [
            "FutureOr<Widget> Function() builder",
            "Flavor flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:aa/app/app.bottomsheets.dart",
        "package:aa/app/app.dialogs.dart",
        "package:aa/app/app.locator.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "Defines the root widget of the application",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:aa/app/app.router.dart",
        "package:aa/l10n/supported_locales.dart",
        "package:aa/observer/screen_observer.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The main home view of the application, displaying S&P 500 metrics.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:aa/ui/views/home/home_viewmodel.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic for displaying S&P 500 metrics.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "fetchSP500Metrics",
          "description": "Fetches the latest S&P 500 metrics",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:aa/services/financial_service.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:aa/ui/views/startup/startup_viewmodel.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "Defines the Flavor enum representing different flavors of the application.",
      "class_diagram": "@startuml\nenum Flavor\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "Service for handling analytics",
      "class_diagram": "@startuml\nclass AnalyticService\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the analytic service",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/services/financial_service.dart",
      "description": "Service for fetching financial data, specifically S&P 500 metrics.",
      "class_diagram": "@startuml\nclass FinancialService\n@enduml",
      "methods": [
        {
          "name": "getSP500Metrics",
          "description": "Fetches S&P 500 metrics from a financial API",
          "parameters": [],
          "return_type": "Future<Map<String, dynamic>>"
        }
      ],
      "dependencies": [
        "package:http/http.dart"
      ]
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "Utility class for launching contact-related actions",
      "class_diagram": "@startuml\nclass ContactUtil\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches WhatsApp with a given phone number and text",
          "parameters": [
            "String phone",
            "String text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches email client with a given email address",
          "parameters": [
            "String email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "Extension on Color for handling hex color strings",
      "class_diagram": "@startuml\nclass HexColor\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Creates a Color from a hex string",
          "parameters": [
            "String hexColorString"
          ],
          "return_type": "Color"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "Utility class for JSON operations",
      "class_diagram": "@startuml\nclass JsonUtil\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Formats a dynamic map to a String-keyed map",
          "parameters": [
            "Map<dynamic, dynamic> json"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts JSON to an object or returns null",
          "parameters": [
            "dynamic json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "T?"
        }
      ],
      "dependencies": []
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "flutter_localizations",
      "version": "sdk: flutter",
      "purpose": "Internationalization support"
    },
    {
      "name": "intl",
      "version": "^0.18.0",
      "purpose": "Internationalization and localization support"
    },
    {
      "name": "url_launcher",
      "version": "^6.1.10",
      "purpose": "Launching URLs and external applications"
    },
    {
      "name": "http",
      "version": "^0.13.4",
      "purpose": "HTTP client for making API requests"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nUser -> AppView: Launches app\nAppView -> StartupView: Initializes\nStartupView -> StartupViewModel: Performs startup logic\nStartupViewModel -> HomeView: Navigates on completion\nHomeView -> HomeViewModel: Initializes\nHomeViewModel -> FinancialService: Fetches S&P 500 metrics\nFinancialService -> HomeViewModel: Returns metrics\nHomeViewModel -> HomeView: Updates UI\nUser -> HomeView: Interacts\nHomeViewModel -> DialogService: Shows dialog\nHomeViewModel -> BottomSheetService: Shows bottom sheet\n@enduml",
  "state_management_flow": "State is managed using the Stacked architecture. ViewModels (e.g., HomeViewModel, StartupViewModel) handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, while app.router.dart manages navigation between views. The HomeViewModel now includes logic to fetch and display S&P 500 metrics.",
  "navigation_flow": "The application starts with the AppView, which sets up the Stacked architecture. It initially shows the StartupView, which then navigates to the HomeView after completing initialization logic. Navigation between views is handled by the Stacked Router defined in app.router.dart.",
  "pubspec_yaml": {
    "name": "aa",
    "description": "A new Flutter project.",
    "version": "0.1.0",
    "environment": {
      "sdk": ">=3.0.3 <4.0.0"
    },
    "dependencies": {
      "flutter": {
        "sdk": "flutter"
      },
      "flutter_localizations": {
        "sdk": "flutter"
      },
      "stacked": "^3.4.0",
      "stacked_services": "^1.1.0",
      "url_launcher": "^6.1.10",
      "http": "^0.13.4"
    },
    "dev_dependencies": {
      "build_runner": "^2.4.5",
      "flutter_test": {
        "sdk": "flutter"
      },
      "flutter_lints": "^2.0.0",
      "mockito": "^5.4.1",
      "stacked_generator": "^1.3.3"
    },
    "flutter": {
      "uses-material-design": true,
      "generate": true
    }
  }
}